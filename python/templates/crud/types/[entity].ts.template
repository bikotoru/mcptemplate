/**
 * Tipos TypeScript para {{ENTITY_NAME}}
 * Generado automáticamente por MCP CRUD Generator
 * Timestamp: {{TIMESTAMP}}
 */

// Tipo base para {{ENTITY_NAME}}
export interface {{ENTITY_NAME}} {
  id: string;
  {{#each FIELDS}}
  {{#if (eq type 'relation')}}
  {{#if relation.multiple}}
  {{name}}: {{relation.relationEntity}}[];
  {{else}}
  {{name}}: {{relation.relationEntity}} | null;
  {{/if}}
  {{else if (eq type 'number')}}
  {{name}}: number{{#unless required}} | null{{/unless}};
  {{else if (eq type 'boolean')}}
  {{name}}: boolean{{#unless required}} | null{{/unless}};
  {{else if (eq type 'date')}}
  {{name}}: Date{{#unless required}} | null{{/unless}};
  {{else if (eq type 'file')}}
  {{name}}: string{{#unless required}} | null{{/unless}}; // URL del archivo
  {{else}}
  {{name}}: string{{#unless required}} | null{{/unless}};
  {{/if}}
  {{/each}}
  createdAt: Date;
  updatedAt: Date;
}

// Tipo para crear {{ENTITY_NAME}} (sin ID, timestamps)
export interface Create{{ENTITY_NAME}}Input {
  {{#each FIELDS}}
  {{#if (eq type 'relation')}}
  {{#if relation.multiple}}
  {{name}}{{#unless required}}?{{/unless}}: {{relation.relationEntity}}SelectOption[];
  {{else}}
  {{name}}{{#unless required}}?{{/unless}}: {{relation.relationEntity}}SelectOption{{#unless required}} | null{{/unless}};
  {{/if}}
  {{else if (eq type 'number')}}
  {{name}}{{#unless required}}?{{/unless}}: number{{#unless required}} | null{{/unless}};
  {{else if (eq type 'boolean')}}
  {{name}}{{#unless required}}?{{/unless}}: boolean{{#unless required}} | null{{/unless}};
  {{else if (eq type 'date')}}
  {{name}}{{#unless required}}?{{/unless}}: Date{{#unless required}} | null{{/unless}};
  {{else if (eq type 'file')}}
  {{name}}{{#unless required}}?{{/unless}}: string{{#unless required}} | null{{/unless}};
  {{else}}
  {{name}}{{#unless required}}?{{/unless}}: string{{#unless required}} | null{{/unless}};
  {{/if}}
  {{/each}}
}

// Tipo para actualizar {{ENTITY_NAME}} (todos los campos opcionales excepto ID)
export interface Update{{ENTITY_NAME}}Input {
  {{#each FIELDS}}
  {{#if (eq type 'relation')}}
  {{#if relation.multiple}}
  {{name}}?: {{relation.relationEntity}}SelectOption[];
  {{else}}
  {{name}}?: {{relation.relationEntity}}SelectOption | null;
  {{/if}}
  {{else if (eq type 'number')}}
  {{name}}?: number | null;
  {{else if (eq type 'boolean')}}
  {{name}}?: boolean | null;
  {{else if (eq type 'date')}}
  {{name}}?: Date | null;
  {{else if (eq type 'file')}}
  {{name}}?: string | null;
  {{else}}
  {{name}}?: string | null;
  {{/if}}
  {{/each}}
}

{{#each FIELDS}}
{{#if (eq type 'relation')}}
// Tipo para la entidad relacionada {{relation.relationEntity}}
export interface {{relation.relationEntity}} {
  {{relation.valueField}}: string;
  {{relation.displayField}}: string;
  {{#each relation.searchFields}}
  {{#unless (or (eq this ../relation.valueField) (eq this ../relation.displayField))}}
  {{this}}?: string;
  {{/unless}}
  {{/each}}
}

// Tipo para opciones de selección de {{relation.relationEntity}}
export interface {{relation.relationEntity}}SelectOption {
  {{relation.valueField}}: string;
  {{relation.displayField}}: string;
}

{{/if}}
{{/each}}

// Tipos para filtros
export interface {{ENTITY_NAME}}Filters {
  {{#each FIELDS}}
  {{#if filterable}}
  {{#if (eq type 'number')}}
  {{name}}_min?: number;
  {{name}}_max?: number;
  {{else if (eq type 'date')}}
  {{name}}_start?: Date;
  {{name}}_end?: Date;
  {{else if (eq type 'boolean')}}
  {{name}}?: boolean;
  {{else if (eq type 'relation')}}
  {{name}}?: string[];
  {{else if (eq type 'select')}}
  {{name}}?: string[];
  {{else}}
  {{name}}?: string;
  {{/if}}
  {{/if}}
  {{/each}}
}

// Tipos para ordenamiento
export type {{ENTITY_NAME}}SortField = 
  {{#each FIELDS}}
  {{#if sortable}}
  | '{{name}}'
  {{/if}}
  {{/each}}
  | 'createdAt'
  | 'updatedAt';

export type SortOrder = 'asc' | 'desc';

// Tipos para búsqueda
export interface {{ENTITY_NAME}}SearchParams {
  search?: string;
  sort?: {{ENTITY_NAME}}SortField;
  order?: SortOrder;
  page?: number;
  limit?: number;
  filters?: {{ENTITY_NAME}}Filters;
}

// Tipo para respuesta de la API de lista
export interface {{ENTITY_NAME}}ListResponse {
  data: {{ENTITY_NAME}}[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNextPage: boolean;
    hasPrevPage: boolean;
  };
  filters: {{ENTITY_NAME}}Filters;
}

// Tipos para respuestas de API
export interface {{ENTITY_NAME}}ApiResponse {
  data?: {{ENTITY_NAME}};
  error?: string;
  message?: string;
}

export interface {{ENTITY_NAME}}ListApiResponse {
  data?: {{ENTITY_NAME}}[];
  pagination?: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNextPage: boolean;
    hasPrevPage: boolean;
  };
  filters?: {{ENTITY_NAME}}Filters;
  error?: string;
  message?: string;
}

// Tipos para errores específicos
export interface {{ENTITY_NAME}}ValidationError {
  field: string;
  message: string;
  code: string;
}

export interface {{ENTITY_NAME}}Error {
  error: string;
  details?: {{ENTITY_NAME}}ValidationError[];
  code?: string;
}

// Tipos para formularios
export interface {{ENTITY_NAME}}FormData {
  {{#each FIELDS}}
  {{#if (eq type 'relation')}}
  {{#if relation.multiple}}
  {{name}}: {{relation.relationEntity}}SelectOption[];
  {{else}}
  {{name}}: {{relation.relationEntity}}SelectOption | null;
  {{/if}}
  {{else if (eq type 'number')}}
  {{name}}: number | string; // String para inputs, number para lógica
  {{else if (eq type 'boolean')}}
  {{name}}: boolean;
  {{else if (eq type 'date')}}
  {{name}}: Date | string | null; // String para inputs de fecha
  {{else if (eq type 'file')}}
  {{name}}: File | string | null; // File para upload, string para URL
  {{else}}
  {{name}}: string;
  {{/if}}
  {{/each}}
}

// Tipos para campos dinámicos
export interface {{ENTITY_NAME}}FieldConfig {
  name: keyof {{ENTITY_NAME}};
  type: '{{#each FIELDS}}{{type}}{{#unless @last}}' | '{{/unless}}{{/each}}';
  label: string;
  required: boolean;
  searchable: boolean;
  sortable: boolean;
  filterable: boolean;
  showInList: boolean;
  placeholder?: string;
  validation?: {
    min?: number;
    max?: number;
    pattern?: string;
    options?: string[];
    accept?: string;
  };
  {{#each FIELDS}}
  {{#if (eq type 'relation')}}
  relation?: {
    endpoint: string;
    displayField: string;
    valueField: string;
    searchFields: string[];
    multiple: boolean;
    preload: boolean;
    minChars: number;
    relationEntity: string;
    allowCreate: boolean;
  };
  {{break}}
  {{/if}}
  {{/each}}
}

// Configuración completa de la entidad
export interface {{ENTITY_NAME}}EntityConfig {
  name: '{{ENTITY_NAME}}';
  namePlural: '{{ENTITY_NAME_PLURAL}}';
  apiEndpoint: '{{API_ENDPOINT}}';
  fields: {{ENTITY_NAME}}FieldConfig[];
  permissions: {
    create: boolean;
    read: boolean;
    update: boolean;
    delete: boolean;
  };
}

// Tipos para hooks
export interface Use{{ENTITY_NAME}}ListOptions {
  page?: number;
  limit?: number;
  search?: string;
  sort?: {{ENTITY_NAME}}SortField;
  order?: SortOrder;
  filters?: {{ENTITY_NAME}}Filters;
  enabled?: boolean;
}

export interface Use{{ENTITY_NAME}}ListResult {
  data: {{ENTITY_NAME}}[] | undefined;
  total: number;
  isLoading: boolean;
  isError: boolean;
  error: Error | null;
  refetch: () => void;
  isFetching: boolean;
}

export interface Use{{ENTITY_NAME}}Result {
  data: {{ENTITY_NAME}} | undefined;
  isLoading: boolean;
  isError: boolean;
  error: Error | null;
  refetch: () => void;
}

export interface Use{{ENTITY_NAME}}MutationResult {
  create{{ENTITY_NAME}}: (data: Create{{ENTITY_NAME}}Input) => Promise<{{ENTITY_NAME}}>;
  update{{ENTITY_NAME}}: (id: string, data: Update{{ENTITY_NAME}}Input) => Promise<{{ENTITY_NAME}}>;
  delete{{ENTITY_NAME}}: (id: string) => Promise<void>;
  bulkDelete: (ids: string[]) => Promise<void>;
  isCreating: boolean;
  isUpdating: boolean;
  isDeleting: boolean;
  error: Error | null;
}

// Tipos utilitarios
export type {{ENTITY_NAME}}Keys = keyof {{ENTITY_NAME}};
export type {{ENTITY_NAME}}RequiredFields = {
  {{#each FIELDS}}
  {{#if required}}
  {{name}}: {{ENTITY_NAME}}['{{name}}'];
  {{/if}}
  {{/each}}
};
export type {{ENTITY_NAME}}OptionalFields = Omit<{{ENTITY_NAME}}, keyof {{ENTITY_NAME}}RequiredFields | 'id' | 'createdAt' | 'updatedAt'>;

// Constantes de tipos
export const {{ENTITY_NAME_UPPER}}_SORT_FIELDS: {{ENTITY_NAME}}SortField[] = [
  {{#each FIELDS}}
  {{#if sortable}}
  '{{name}}',
  {{/if}}
  {{/each}}
  'createdAt',
  'updatedAt'
];

export const {{ENTITY_NAME_UPPER}}_SEARCHABLE_FIELDS: (keyof {{ENTITY_NAME}})[] = [
  {{#each FIELDS}}
  {{#if searchable}}
  '{{name}}',
  {{/if}}
  {{/each}}
];

export const {{ENTITY_NAME_UPPER}}_FILTERABLE_FIELDS: (keyof {{ENTITY_NAME}})[] = [
  {{#each FIELDS}}
  {{#if filterable}}
  '{{name}}',
  {{/if}}
  {{/each}}
];

export const {{ENTITY_NAME_UPPER}}_LIST_FIELDS: (keyof {{ENTITY_NAME}})[] = [
  {{#each FIELDS}}
  {{#if showInList}}
  '{{name}}',
  {{/if}}
  {{/each}}
];

// Helpers de tipo
export function is{{ENTITY_NAME}}(obj: any): obj is {{ENTITY_NAME}} {
  return (
    obj &&
    typeof obj === 'object' &&
    typeof obj.id === 'string' &&
    {{#each FIELDS}}
    {{#if required}}
    {{#if (eq type 'string')}}
    typeof obj.{{name}} === 'string' &&
    {{else if (eq type 'number')}}
    typeof obj.{{name}} === 'number' &&
    {{else if (eq type 'boolean')}}
    typeof obj.{{name}} === 'boolean' &&
    {{else if (eq type 'date')}}
    obj.{{name}} instanceof Date &&
    {{/if}}
    {{/if}}
    {{/each}}
    obj.createdAt instanceof Date &&
    obj.updatedAt instanceof Date
  );
}

export function create{{ENTITY_NAME}}FromFormData(formData: {{ENTITY_NAME}}FormData): Create{{ENTITY_NAME}}Input {
  return {
    {{#each FIELDS}}
    {{#if (eq type 'number')}}
    {{name}}: typeof formData.{{name}} === 'string' ? parseFloat(formData.{{name}}) : formData.{{name}},
    {{else if (eq type 'date')}}
    {{name}}: typeof formData.{{name}} === 'string' ? new Date(formData.{{name}}) : formData.{{name}},
    {{else}}
    {{name}}: formData.{{name}},
    {{/if}}
    {{/each}}
  };
}
