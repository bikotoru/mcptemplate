/**
 * Componente de filtros para {{ENTITY_NAME_PLURAL}}
 * Generado automáticamente por MCP CRUD Generator
 * Timestamp: {{TIMESTAMP}}
 */

import React, { useState, useEffect, useCallback } from 'react';
import { XMarkIcon, FunnelIcon, TrashIcon } from '@heroicons/react/24/outline';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Select } from '@/components/ui/Select';
import { DateRangePicker } from '@/components/ui/DateRangePicker';
import { Checkbox } from '@/components/ui/Checkbox';
import { RelationFilter } from '@/components/ui/RelationFilter';
import { Badge } from '@/components/ui/Badge';
import { useDebounce } from '@/hooks/useDebounce';

interface FilterValues {
  {{#each FIELDS}}
  {{#if filterable}}
  {{name}}?: {{#if (eq type 'number')}}{ min?: number; max?: number }{{else if (eq type 'date')}}{ start?: Date; end?: Date }{{else if (eq type 'boolean')}}boolean{{else if (eq type 'relation')}}string[]{{else if (eq type 'select')}}string[]{{else}}string{{/if}};
  {{/if}}
  {{/each}}
}

interface {{ENTITY_NAME}}FilterProps {
  filters: FilterValues;
  onFilterChange: (filters: FilterValues) => void;
  className?: string;
}

export const {{ENTITY_NAME}}Filter: React.FC<{{ENTITY_NAME}}FilterProps> = ({
  filters,
  onFilterChange,
  className = ''
}) => {
  const [localFilters, setLocalFilters] = useState<FilterValues>(filters);
  const debouncedFilters = useDebounce(localFilters, 500);

  // Sincronizar filtros con delay
  useEffect(() => {
    onFilterChange(debouncedFilters);
  }, [debouncedFilters, onFilterChange]);

  // Actualizar filtros locales cuando cambien los externos
  useEffect(() => {
    setLocalFilters(filters);
  }, [filters]);

  const updateFilter = useCallback((field: string, value: any) => {
    setLocalFilters(prev => ({
      ...prev,
      [field]: value
    }));
  }, []);

  const clearFilter = useCallback((field: string) => {
    setLocalFilters(prev => {
      const newFilters = { ...prev };
      delete newFilters[field as keyof FilterValues];
      return newFilters;
    });
  }, []);

  const clearAllFilters = useCallback(() => {
    setLocalFilters({});
  }, []);

  // Contar filtros activos
  const activeFiltersCount = Object.keys(localFilters).filter(key => {
    const value = localFilters[key as keyof FilterValues];
    if (value === null || value === undefined || value === '') return false;
    if (Array.isArray(value)) return value.length > 0;
    if (typeof value === 'object') {
      return Object.values(value).some(v => v !== null && v !== undefined && v !== '');
    }
    return true;
  }).length;

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Header de filtros */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <FunnelIcon className="w-5 h-5 text-gray-500" />
          <h3 className="text-lg font-medium text-gray-900">Filtros</h3>
          {activeFiltersCount > 0 && (
            <Badge variant="primary" size="sm">
              {activeFiltersCount}
            </Badge>
          )}
        </div>
        
        {activeFiltersCount > 0 && (
          <Button
            variant="ghost"
            size="sm"
            onClick={clearAllFilters}
            className="text-gray-500 hover:text-gray-700"
          >
            <TrashIcon className="w-4 h-4 mr-1" />
            Limpiar todo
          </Button>
        )}
      </div>

      {/* Filtros aplicados */}
      {activeFiltersCount > 0 && (
        <div className="flex flex-wrap gap-2">
          {{#each FIELDS}}
          {{#if filterable}}
          {localFilters.{{name}} && (
            <Badge
              variant="secondary"
              className="flex items-center space-x-1"
            >
              <span>{{label}}: 
                {{#if (eq type 'relation')}}
                {Array.isArray(localFilters.{{name}}) ? `${localFilters.{{name}}.length} seleccionado${localFilters.{{name}}.length !== 1 ? 's' : ''}` : localFilters.{{name}} }
                {{else if (eq type 'boolean')}}
                {localFilters.{{name}} ? 'Sí' : 'No'}
                {{else if (eq type 'number')}}
                {localFilters.{{name}}.min && localFilters.{{name}}.max 
                  ? `${localFilters.{{name}}.min} - ${localFilters.{{name}}.max}`
                  : localFilters.{{name}}.min 
                    ? `≥ ${localFilters.{{name}}.min}`
                    : `≤ ${localFilters.{{name}}.max}`
                }
                {{else if (eq type 'date')}}
                {localFilters.{{name}}.start && localFilters.{{name}}.end
                  ? `${localFilters.{{name}}.start.toLocaleDateString()} - ${localFilters.{{name}}.end.toLocaleDateString()}`
                  : localFilters.{{name}}.start
                    ? `Desde ${localFilters.{{name}}.start.toLocaleDateString()}`
                    : `Hasta ${localFilters.{{name}}.end.toLocaleDateString()}`
                }
                {{else}}
                {localFilters.{{name}} }
                {{/if}}
              </span>
              <button
                onClick={() => clearFilter('{{name}}')}
                className="text-gray-500 hover:text-gray-700"
              >
                <XMarkIcon className="w-3 h-3" />
              </button>
            </Badge>
          )}
          {{/if}}
          {{/each}}
        </div>
      )}

      {/* Campos de filtro */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {{#each FIELDS}}
        {{#if filterable}}
        
        {/* Filtro: {{label}} */}
        <div className="space-y-2">
          {{#if (eq type 'text')}}
          <Input
            label="{{label}}"
            placeholder="Filtrar por {{lower label}}"
            value={localFilters.{{name}} || ''}
            onChange={(e) => updateFilter('{{name}}', e.target.value || undefined)}
            size="sm"
          />
          
          {{else if (eq type 'number')}}
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700">{{label}}</label>
            <div className="grid grid-cols-2 gap-2">
              <Input
                placeholder="Mínimo"
                type="number"
                value={localFilters.{{name}}?.min?.toString() || ''}
                onChange={(e) => updateFilter('{{name}}', {
                  ...localFilters.{{name}},
                  min: e.target.value ? Number(e.target.value) : undefined
                })}
                size="sm"
              />
              <Input
                placeholder="Máximo"
                type="number"
                value={localFilters.{{name}}?.max?.toString() || ''}
                onChange={(e) => updateFilter('{{name}}', {
                  ...localFilters.{{name}},
                  max: e.target.value ? Number(e.target.value) : undefined
                })}
                size="sm"
              />
            </div>
          </div>
          
          {{else if (eq type 'select')}}
          <Select
            label="{{label}}"
            placeholder="Filtrar por {{lower label}}"
            value={Array.isArray(localFilters.{{name}}) ? localFilters.{{name}} : localFilters.{{name}} ? [localFilters.{{name}}] : []}
            onChange={(value) => updateFilter('{{name}}', Array.isArray(value) ? value : [value])}
            multiple
            options={[
              {{#each validation.options}}
              { value: "{{this}}", label: "{{this}}" },
              {{/each}}
            ]}
            size="sm"
          />
          
          {{else if (eq type 'boolean')}}
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700">{{label}}</label>
            <div className="space-y-1">
              <Checkbox
                label="Sí"
                checked={localFilters.{{name}} === true}
                onChange={(checked) => updateFilter('{{name}}', checked ? true : undefined)}
              />
              <Checkbox
                label="No"
                checked={localFilters.{{name}} === false}
                onChange={(checked) => updateFilter('{{name}}', checked ? false : undefined)}
              />
            </div>
          </div>
          
          {{else if (eq type 'date')}}
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700">{{label}}</label>
            <DateRangePicker
              startDate={localFilters.{{name}}?.start}
              endDate={localFilters.{{name}}?.end}
              onChange={(start, end) => updateFilter('{{name}}', 
                start || end ? { start, end } : undefined
              )}
              placeholder="Seleccionar rango"
              size="sm"
            />
          </div>
          
          {{else if (eq type 'relation')}}
          <RelationFilter
            label="{{label}}"
            endpoint="{{relation.endpoint}}"
            displayField="{{relation.displayField}}"
            valueField="{{relation.valueField}}"
            searchFields={[{{#each relation.searchFields}}"{{this}}"{{#unless @last}}, {{/unless}}{{/each}}]}
            value={localFilters.{{name}} || []}
            onChange={(value) => updateFilter('{{name}}', value.length > 0 ? value : undefined)}
            placeholder="Filtrar por {{lower label}}"
            multiple
            size="sm"
          />
          {{/if}}
        </div>
        
        {{/if}}
        {{/each}}
      </div>

      {/* Estadísticas de filtros */}
      {activeFiltersCount > 0 && (
        <div className="text-sm text-gray-600 border-t pt-4">
          <p>
            {activeFiltersCount} filtro{activeFiltersCount !== 1 ? 's' : ''} aplicado{activeFiltersCount !== 1 ? 's' : ''}
          </p>
        </div>
      )}
    </div>
  );
};

export default {{ENTITY_NAME}}Filter;
