/**
 * Componente de búsqueda para {{ENTITY_NAME_PLURAL}}
 * Generado automáticamente por MCP CRUD Generator
 * Timestamp: {{TIMESTAMP}}
 */

import React, { useState, useEffect, useCallback } from 'react';
import {
  MagnifyingGlassIcon,
  XMarkIcon,
  ClockIcon,
  StarIcon
} from '@heroicons/react/24/outline';
import { Input } from '@/components/ui/Input';
import { Button } from '@/components/ui/Button';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';
import { useDebounce } from '@/hooks/useDebounce';
import { useLocalStorage } from '@/hooks/useLocalStorage';

interface {{ENTITY_NAME}}SearchProps {
  onSearch: (query: string) => void;
  placeholder?: string;
  isLoading?: boolean;
  className?: string;
}

export const {{ENTITY_NAME}}Search: React.FC<{{ENTITY_NAME}}SearchProps> = ({
  onSearch,
  placeholder = "Buscar {{ENTITY_NAME_PLURAL_LOWER}}...",
  isLoading = false,
  className = ''
}) => {
  const [query, setQuery] = useState('');
  const [isExpanded, setIsExpanded] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  
  // Búsquedas recientes guardadas en localStorage
  const [recentSearches, setRecentSearches] = useLocalStorage<string[]>(
    '{{ENTITY_NAME_LOWER}}-recent-searches',
    []
  );
  
  // Búsquedas favoritas
  const [favoriteSearches, setFavoriteSearches] = useLocalStorage<string[]>(
    '{{ENTITY_NAME_LOWER}}-favorite-searches',
    []
  );

  const debouncedQuery = useDebounce(query, 300);

  // Efectuar búsqueda cuando cambie el query debounced
  useEffect(() => {
    onSearch(debouncedQuery);
  }, [debouncedQuery, onSearch]);

  // Manejar cambio en el input
  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setQuery(value);
    setShowSuggestions(value.length > 0 || isExpanded);
  }, [isExpanded]);

  // Limpiar búsqueda
  const clearSearch = useCallback(() => {
    setQuery('');
    setShowSuggestions(false);
    onSearch('');
  }, [onSearch]);

  // Ejecutar búsqueda inmediata
  const executeSearch = useCallback((searchQuery: string) => {
    setQuery(searchQuery);
    onSearch(searchQuery);
    setShowSuggestions(false);
    
    // Agregar a búsquedas recientes (evitar duplicados)
    if (searchQuery.trim()) {
      setRecentSearches(prev => {
        const filtered = prev.filter(search => search !== searchQuery);
        return [searchQuery, ...filtered].slice(0, 10); // Máximo 10 búsquedas recientes
      });
    }
  }, [onSearch, setRecentSearches]);

  // Manejar envío del formulario
  const handleSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault();
    if (query.trim()) {
      executeSearch(query);
    }
  }, [query, executeSearch]);

  // Agregar/quitar de favoritos
  const toggleFavorite = useCallback((searchQuery: string) => {
    setFavoriteSearches(prev => {
      if (prev.includes(searchQuery)) {
        return prev.filter(search => search !== searchQuery);
      } else {
        return [...prev, searchQuery].slice(0, 5); // Máximo 5 favoritos
      }
    });
  }, [setFavoriteSearches]);

  // Manejar focus/blur del input
  const handleFocus = useCallback(() => {
    setIsExpanded(true);
    setShowSuggestions(true);
  }, []);

  const handleBlur = useCallback(() => {
    // Delay para permitir clicks en sugerencias
    setTimeout(() => {
      setIsExpanded(false);
      setShowSuggestions(false);
    }, 200);
  }, []);

  // Campos de búsqueda disponibles
  const searchableFields = [
    {{#each FIELDS}}
    {{#if searchable}}
    { field: '{{name}}', label: '{{label}}' },
    {{/if}}
    {{/each}}
  ];

  return (
    <div className={`relative ${className}`}>
      {/* Input de búsqueda */}
      <form onSubmit={handleSubmit} className="relative">
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            {isLoading ? (
              <LoadingSpinner size="sm" />
            ) : (
              <MagnifyingGlassIcon className="h-5 w-5 text-gray-400" />
            )}
          </div>
          
          <Input
            type="text"
            value={query}
            onChange={handleInputChange}
            onFocus={handleFocus}
            onBlur={handleBlur}
            placeholder={placeholder}
            className="pl-10 pr-10"
            disabled={isLoading}
          />
          
          {query && (
            <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
              <button
                type="button"
                onClick={clearSearch}
                className="text-gray-400 hover:text-gray-600"
              >
                <XMarkIcon className="h-5 w-5" />
              </button>
            </div>
          )}
        </div>
      </form>

      {/* Sugerencias y búsquedas recientes */}
      {showSuggestions && (isExpanded || query) && (
        <div className="absolute z-10 mt-1 w-full bg-white shadow-lg rounded-md border border-gray-200 max-h-96 overflow-y-auto">
          {/* Información de campos de búsqueda */}
          {isExpanded && searchableFields.length > 0 && (
            <div className="p-3 border-b border-gray-100">
              <p className="text-xs text-gray-500 mb-2">Se buscará en:</p>
              <div className="flex flex-wrap gap-1">
                {searchableFields.map(({ field, label }) => (
                  <span
                    key={field}
                    className="inline-flex px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded"
                  >
                    {label}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Búsquedas favoritas */}
          {favoriteSearches.length > 0 && (
            <div className="border-b border-gray-100">
              <div className="p-2">
                <p className="text-xs font-medium text-gray-700 mb-2 flex items-center">
                  <StarIcon className="w-3 h-3 mr-1" />
                  Favoritos
                </p>
                {favoriteSearches.map((search, index) => (
                  <button
                    key={index}
                    onClick={() => executeSearch(search)}
                    className="w-full text-left px-2 py-1 text-sm text-gray-700 hover:bg-gray-100 rounded flex items-center justify-between group"
                  >
                    <span className="flex items-center">
                      <StarIcon className="w-3 h-3 mr-2 text-yellow-500" />
                      {search}
                    </span>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        toggleFavorite(search);
                      }}
                      className="opacity-0 group-hover:opacity-100 text-gray-400 hover:text-gray-600"
                    >
                      <XMarkIcon className="w-3 h-3" />
                    </button>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Búsquedas recientes */}
          {recentSearches.length > 0 && (
            <div>
              <div className="p-2">
                <p className="text-xs font-medium text-gray-700 mb-2 flex items-center">
                  <ClockIcon className="w-3 h-3 mr-1" />
                  Búsquedas recientes
                </p>
                {recentSearches.map((search, index) => (
                  <button
                    key={index}
                    onClick={() => executeSearch(search)}
                    className="w-full text-left px-2 py-1 text-sm text-gray-700 hover:bg-gray-100 rounded flex items-center justify-between group"
                  >
                    <span className="flex items-center">
                      <ClockIcon className="w-3 h-3 mr-2 text-gray-400" />
                      {search}
                    </span>
                    <div className="flex items-center space-x-1 opacity-0 group-hover:opacity-100">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleFavorite(search);
                        }}
                        className={`text-gray-400 hover:text-yellow-500 ${
                          favoriteSearches.includes(search) ? 'text-yellow-500' : ''
                        }`}
                        title={favoriteSearches.includes(search) ? 'Quitar de favoritos' : 'Agregar a favoritos'}
                      >
                        <StarIcon className="w-3 h-3" />
                      </button>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          setRecentSearches(prev => prev.filter(s => s !== search));
                        }}
                        className="text-gray-400 hover:text-gray-600"
                        title="Eliminar"
                      >
                        <XMarkIcon className="w-3 h-3" />
                      </button>
                    </div>
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Estado vacío */}
          {!query && favoriteSearches.length === 0 && recentSearches.length === 0 && isExpanded && (
            <div className="p-4 text-center text-gray-500">
              <MagnifyingGlassIcon className="w-8 h-8 mx-auto mb-2 text-gray-300" />
              <p className="text-sm">Comienza a escribir para buscar</p>
            </div>
          )}
        </div>
      )}

      {/* Atajos de teclado */}
      {isExpanded && (
        <div className="absolute -bottom-6 left-0 text-xs text-gray-500">
          Presiona Enter para buscar
        </div>
      )}
    </div>
  );
};

export default {{ENTITY_NAME}}Search;
