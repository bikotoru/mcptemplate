/**
 * API Route para {{ENTITY_NAME}} individual - App Router (route.ts)
 * Operaciones GET, PUT, DELETE por ID
 * Generado automáticamente por MCP CRUD Generator
 * Timestamp: {{TIMESTAMP}}
 */

import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { {{ENTITY_NAME_LOWER}}Schema } from '../../validation/{{ENTITY_NAME_LOWER}}';
// import { getServerSession } from 'next-auth/next';
// import { authOptions } from '../../../auth/config';
// import { prisma } from '@/lib/prisma'; // Ajusta según tu ORM
// import { dbConnect } from '@/lib/mongodb'; // O tu conexión a DB

// Schema para validar el ID
const idSchema = z.object({
  id: z.string().min(1, 'ID es requerido'),
});

interface RouteParams {
  params: {
    id: string;
  };
}

/**
 * GET - Obtener {{ENTITY_NAME_LOWER}} por ID
 */
export async function GET(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    // Verificar autenticación (opcional)
    // const session = await getServerSession(authOptions);
    // if (!session) {
    //   return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
    // }

    {{#unless PERMISSIONS.read}}
    return NextResponse.json({ error: 'No tienes permisos para leer {{ENTITY_NAME_PLURAL_LOWER}}' }, { status: 403 });
    {{/unless}}

    // Validar ID
    const { id } = idSchema.parse(params);

    // Ejemplo con Prisma
    /*
    const {{ENTITY_NAME_LOWER}} = await prisma.{{ENTITY_NAME_LOWER}}.findUnique({
      where: { id },
      include: {
        {{#each FIELDS}}
        {{#if (eq type 'relation')}}
        {{name}}: {{#if relation.multiple}}true{{else}}{
          select: {
            {{relation.valueField}}: true,
            {{relation.displayField}}: true,
          }
        }{{/if}},
        {{/if}}
        {{/each}}
      },
    });

    if (!{{ENTITY_NAME_LOWER}}) {
      return NextResponse.json({ error: '{{ENTITY_NAME}} no encontrado' }, { status: 404 });
    }
    */

    // Mock de datos - Reemplazar con tu lógica
    const {{ENTITY_NAME_LOWER}} = generateMockItem(id);
    
    if (!{{ENTITY_NAME_LOWER}}) {
      return NextResponse.json({ error: '{{ENTITY_NAME}} no encontrado' }, { status: 404 });
    }

    return NextResponse.json({{ENTITY_NAME_LOWER}});

  } catch (error) {
    console.error('Error in {{ENTITY_NAME_LOWER}} GET by ID API:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({ 
        error: 'ID inválido',
        details: error.errors 
      }, { status: 400 });
    }
    
    return NextResponse.json({ 
      error: 'Error interno del servidor',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    }, { status: 500 });
  }
}

/**
 * PUT - Actualizar {{ENTITY_NAME_LOWER}} por ID
 */
export async function PUT(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    // Verificar autenticación (opcional)
    // const session = await getServerSession(authOptions);
    // if (!session) {
    //   return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
    // }

    {{#unless PERMISSIONS.update}}
    return NextResponse.json({ error: 'No tienes permisos para actualizar {{ENTITY_NAME_PLURAL_LOWER}}' }, { status: 403 });
    {{/unless}}

    // Validar ID
    const { id } = idSchema.parse(params);

    // Obtener datos del cuerpo de la petición
    const body = await request.json();
    
    // Validar datos del cuerpo de la petición
    const validatedData = {{ENTITY_NAME_LOWER}}Schema.partial().parse(body);

    // Verificar que el {{ENTITY_NAME_LOWER}} existe
    /*
    const existing{{ENTITY_NAME}} = await prisma.{{ENTITY_NAME_LOWER}}.findUnique({
      where: { id },
    });

    if (!existing{{ENTITY_NAME}}) {
      return NextResponse.json({ error: '{{ENTITY_NAME}} no encontrado' }, { status: 404 });
    }
    */

    // Procesar relaciones si existen
    const processedData = { ...validatedData };
    
    {{#each FIELDS}}
    {{#if (eq type 'relation')}}
    if (processedData.{{name}}) {
      {{#if relation.multiple}}
      // Actualizar múltiples relaciones
      processedData.{{name}} = {
        set: processedData.{{name}}.map((item: any) => ({ 
          {{relation.valueField}}: item.{{relation.valueField}} 
        }))
      };
      {{else}}
      // Actualizar relación única
      processedData.{{name}} = {
        connect: { {{relation.valueField}}: processedData.{{name}}.{{relation.valueField}} }
      };
      {{/if}}
    }
    {{/if}}
    {{/each}}

    // Ejemplo con Prisma
    /*
    const updated{{ENTITY_NAME}} = await prisma.{{ENTITY_NAME_LOWER}}.update({
      where: { id },
      data: {
        ...processedData,
        updatedAt: new Date(),
      },
      include: {
        {{#each FIELDS}}
        {{#if (eq type 'relation')}}
        {{name}}: {{#if relation.multiple}}true{{else}}{
          select: {
            {{relation.valueField}}: true,
            {{relation.displayField}}: true,
          }
        }{{/if}},
        {{/if}}
        {{/each}}
      },
    });
    */

    // Mock de actualización - Reemplazar con tu lógica
    const updated{{ENTITY_NAME}} = {
      id,
      ...validatedData,
      updatedAt: new Date(),
    };

    return NextResponse.json(updated{{ENTITY_NAME}});

  } catch (error) {
    console.error('Error in {{ENTITY_NAME_LOWER}} PUT API:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({ 
        error: 'Datos inválidos',
        details: error.errors 
      }, { status: 400 });
    }
    
    return NextResponse.json({ 
      error: 'Error interno del servidor',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    }, { status: 500 });
  }
}

/**
 * DELETE - Eliminar {{ENTITY_NAME_LOWER}} por ID
 */
export async function DELETE(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    // Verificar autenticación (opcional)
    // const session = await getServerSession(authOptions);
    // if (!session) {
    //   return NextResponse.json({ error: 'No autorizado' }, { status: 401 });
    // }

    {{#unless PERMISSIONS.delete}}
    return NextResponse.json({ error: 'No tienes permisos para eliminar {{ENTITY_NAME_PLURAL_LOWER}}' }, { status: 403 });
    {{/unless}}

    // Validar ID
    const { id } = idSchema.parse(params);

    // Verificar que el {{ENTITY_NAME_LOWER}} existe
    /*
    const existing{{ENTITY_NAME}} = await prisma.{{ENTITY_NAME_LOWER}}.findUnique({
      where: { id },
    });

    if (!existing{{ENTITY_NAME}}) {
      return NextResponse.json({ error: '{{ENTITY_NAME}} no encontrado' }, { status: 404 });
    }

    // Eliminar el {{ENTITY_NAME_LOWER}}
    await prisma.{{ENTITY_NAME_LOWER}}.delete({
      where: { id },
    });
    */

    // Mock de eliminación - Reemplazar con tu lógica
    const mockItem = generateMockItem(id);
    if (!mockItem) {
      return NextResponse.json({ error: '{{ENTITY_NAME}} no encontrado' }, { status: 404 });
    }

    return NextResponse.json({ 
      message: '{{ENTITY_NAME}} eliminado exitosamente',
      id 
    });

  } catch (error) {
    console.error('Error in {{ENTITY_NAME_LOWER}} DELETE API:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({ 
        error: 'ID inválido',
        details: error.errors 
      }, { status: 400 });
    }
    
    return NextResponse.json({ 
      error: 'Error interno del servidor',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    }, { status: 500 });
  }
}

/**
 * Función auxiliar para generar un item mock por ID
 * Reemplazar con tu lógica de base de datos
 */
function generateMockItem(id: string) {
  // Esta es una implementación mock - reemplazar con tu lógica real
  if (!id.startsWith('mock_')) {
    return null;
  }

  const index = parseInt(id.replace('mock_', '')) || 1;
  
  return {
    id,
    {{#each FIELDS}}
    {{#if (eq type 'text')}}
    {{name}}: `{{label}} ${index}`,
    {{else if (eq type 'number')}}
    {{name}}: index * 10,
    {{else if (eq type 'boolean')}}
    {{name}}: index % 2 === 0,
    {{else if (eq type 'date')}}
    {{name}}: new Date(Date.now() - index * 24 * 60 * 60 * 1000),
    {{else if (eq type 'email')}}
    {{name}}: `user${index}@example.com`,
    {{else if (eq type 'select')}}
    {{name}}: {{#if validation.options}}'{{first validation.options}}'{{else}}'option1'{{/if}},
    {{else if (eq type 'relation')}}
    {{name}}: {{#if relation.multiple}}[{ {{relation.valueField}}: `rel_${index}`, {{relation.displayField}}: `Relación ${index}` }]{{else}}{ {{relation.valueField}}: `rel_${index}`, {{relation.displayField}}: `Relación ${index}` }{{/if}},
    {{else}}
    {{name}}: `{{label}} ${index}`,
    {{/if}}
    {{/each}}
    createdAt: new Date(Date.now() - index * 24 * 60 * 60 * 1000),
    updatedAt: new Date(),
  };
}