/**
 * Página de creación de {{ENTITY_NAME}}
 * Generado automáticamente por MCP CRUD Generator
 * Timestamp: {{TIMESTAMP}}
 */

import React from 'react';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { {{ENTITY_NAME}}Form } from '../../components/{{ENTITY_NAME}}Form';
import { Layout } from '@/components/Layout';
import { Breadcrumbs } from '@/components/Breadcrumbs';
import type { {{ENTITY_NAME}} } from '../../types/{{ENTITY_NAME_LOWER}}';

interface Create{{ENTITY_NAME}}PageProps {
  initialData?: Partial<{{ENTITY_NAME}}>;
}

const Create{{ENTITY_NAME}}Page: React.FC<Create{{ENTITY_NAME}}PageProps> = ({
  initialData
}) => {
  const router = useRouter();

  // Breadcrumbs para navegación
  const breadcrumbs = [
    { label: 'Inicio', href: '/' },
    { label: '{{ENTITY_NAME_PLURAL}}', href: '/{{ENTITY_NAME_LOWER}}' },
    { label: 'Crear', href: '/{{ENTITY_NAME_LOWER}}/create' }
  ];

  const pageTitle = 'Crear {{ENTITY_NAME}}';
  const pageDescription = 'Crea un nuevo {{ENTITY_NAME_LOWER}} completando el formulario con la información requerida.';

  // Handler para éxito en la creación
  const handleSuccess = (created{{ENTITY_NAME}}: {{ENTITY_NAME}}) => {
    // Redirigir a la página de detalles o lista
    router.push(`/{{ENTITY_NAME_LOWER}}`);
  };

  // Handler para cancelar
  const handleCancel = () => {
    router.push('/{{ENTITY_NAME_LOWER}}');
  };

  return (
    <Layout>
      <Head>
        <title>{pageTitle} | Tu App</title>
        <meta name="description" content={pageDescription} />
        <meta name="robots" content="noindex, nofollow" />
        
        {/* Open Graph */}
        <meta property="og:title" content={pageTitle} />
        <meta property="og:description" content={pageDescription} />
        <meta property="og:type" content="website" />
        
        {/* Twitter Card */}
        <meta name="twitter:card" content="summary" />
        <meta name="twitter:title" content={pageTitle} />
        <meta name="twitter:description" content={pageDescription} />
      </Head>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Breadcrumbs */}
        <Breadcrumbs items={breadcrumbs} className="mb-6" />

        {/* Formulario de creación */}
        <{{ENTITY_NAME}}Form
          mode="create"
          initialData={initialData}
          onSuccess={handleSuccess}
          onCancel={handleCancel}
        />
      </div>
    </Layout>
  );
};

export default Create{{ENTITY_NAME}}Page;

// Verificar permisos en el servidor
export const getServerSideProps: GetServerSideProps<Create{{ENTITY_NAME}}PageProps> = async (context) => {
  {{#unless PERMISSIONS.create}}
  // Crear está deshabilitado - redirigir
  return {
    redirect: {
      destination: '/{{ENTITY_NAME_LOWER}}',
      permanent: false,
    },
  };
  {{/unless}}

  try {
    // Aquí puedes agregar verificación de autenticación/autorización
    // Por ejemplo, verificar si el usuario tiene permisos para crear
    
    // const session = await getServerSession(context.req, context.res, authOptions);
    // if (!session) {
    //   return {
    //     redirect: {
    //       destination: '/auth/signin',
    //       permanent: false,
    //     },
    //   };
    // }

    // Datos iniciales opcionales (ej: valores por defecto desde query params)
    const initialData: Partial<{{ENTITY_NAME}}> = {};
    
    // Extraer valores iniciales de query parameters si existen
    const { 
      {{#each FIELDS}}
      {{#unless (eq type 'relation')}}
      {{name}},
      {{/unless}}
      {{/each}}
      ...queryParams 
    } = context.query;

    {{#each FIELDS}}
    {{#unless (eq type 'relation')}}
    if ({{name}} && typeof {{name}} === 'string') {
      {{#if (eq type 'number')}}
      const parsed{{capitalize name}} = Number({{name}});
      if (!isNaN(parsed{{capitalize name}})) {
        initialData.{{name}} = parsed{{capitalize name}};
      }
      {{else if (eq type 'boolean')}}
      initialData.{{name}} = {{name}} === 'true';
      {{else if (eq type 'date')}}
      const parsed{{capitalize name}} = new Date({{name}});
      if (!isNaN(parsed{{capitalize name}}.getTime())) {
        initialData.{{name}} = parsed{{capitalize name}};
      }
      {{else}}
      initialData.{{name}} = {{name}};
      {{/if}}
    }
    {{/unless}}
    {{/each}}

    return {
      props: {
        initialData: Object.keys(initialData).length > 0 ? initialData : undefined,
      },
    };

  } catch (error) {
    console.error('Error in create {{ENTITY_NAME_LOWER}} page:', error);

    return {
      props: {
        initialData: undefined,
      },
    };
  }
};
