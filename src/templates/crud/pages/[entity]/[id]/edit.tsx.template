/**
 * Página de edición de {{ENTITY_NAME}}
 * Generado automáticamente por MCP CRUD Generator
 * Timestamp: {{TIMESTAMP}}
 */

import React from 'react';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { QueryClient, dehydrate } from '@tanstack/react-query';
import { {{ENTITY_NAME}}Form } from '../../../components/{{ENTITY_NAME}}Form';
import { Layout } from '@/components/Layout';
import { Breadcrumbs } from '@/components/Breadcrumbs';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';
import { Alert } from '@/components/ui/Alert';
import type { {{ENTITY_NAME}} } from '../../../types/{{ENTITY_NAME_LOWER}}';

interface Edit{{ENTITY_NAME}}PageProps {
  id: string;
  initialData?: {{ENTITY_NAME}};
  error?: string;
}

const Edit{{ENTITY_NAME}}Page: React.FC<Edit{{ENTITY_NAME}}PageProps> = ({
  id,
  initialData,
  error
}) => {
  const router = useRouter();

  // Breadcrumbs para navegación
  const breadcrumbs = [
    { label: 'Inicio', href: '/' },
    { label: '{{ENTITY_NAME_PLURAL}}', href: '/{{ENTITY_NAME_LOWER}}' },
    { 
      label: initialData ? 
        {{#each FIELDS}}
        {{#if showInList}}
        {{#if @first}}
        `${initialData.{{name}} }` || 
        {{/if}}
        {{/if}}
        {{/each}}
        `{{ENTITY_NAME}} #${id}` : 
        'Cargando...', 
      href: `/{{ENTITY_NAME_LOWER}}/${id}` 
    },
    { label: 'Editar', href: `/{{ENTITY_NAME_LOWER}}/${id}/edit` }
  ];

  const pageTitle = initialData ? 
    {{#each FIELDS}}
    {{#if showInList}}
    {{#if @first}}
    `Editar ${initialData.{{name}} }` ||
    {{/if}}
    {{/if}}
    {{/each}}
    `Editar {{ENTITY_NAME}} #${id}` :
    `Editar {{ENTITY_NAME}}`;
    
  const pageDescription = `Edita la información del {{ENTITY_NAME_LOWER}} seleccionado.`;

  // Handler para éxito en la edición
  const handleSuccess = (updated{{ENTITY_NAME}}: {{ENTITY_NAME}}) => {
    // Redirigir a la página de detalles o lista
    router.push(`/{{ENTITY_NAME_LOWER}}`);
  };

  // Handler para cancelar
  const handleCancel = () => {
    router.push('/{{ENTITY_NAME_LOWER}}');
  };

  // Mostrar error si hay problemas
  if (error) {
    return (
      <Layout>
        <Head>
          <title>Error - Editar {{ENTITY_NAME}} | Tu App</title>
          <meta name="description" content="Error al cargar {{ENTITY_NAME_LOWER}}" />
        </Head>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <Breadcrumbs items={breadcrumbs} className="mb-6" />
          
          <Alert variant="error" className="mb-6">
            <div>
              <h3 className="text-lg font-medium text-red-800 mb-2">
                Error al cargar {{ENTITY_NAME_LOWER}}
              </h3>
              <p className="text-red-700">{error}</p>
              <div className="mt-4 flex space-x-3">
                <button
                  onClick={() => router.reload()}
                  className="bg-red-100 px-4 py-2 rounded-md text-sm font-medium text-red-800 hover:bg-red-200"
                >
                  Reintentar
                </button>
                <button
                  onClick={() => router.push('/{{ENTITY_NAME_LOWER}}')}
                  className="bg-gray-100 px-4 py-2 rounded-md text-sm font-medium text-gray-800 hover:bg-gray-200"
                >
                  Volver a la lista
                </button>
              </div>
            </div>
          </Alert>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <Head>
        <title>{pageTitle} | Tu App</title>
        <meta name="description" content={pageDescription} />
        <meta name="robots" content="noindex, nofollow" />
        
        {/* Open Graph */}
        <meta property="og:title" content={pageTitle} />
        <meta property="og:description" content={pageDescription} />
        <meta property="og:type" content="website" />
        
        {/* Twitter Card */}
        <meta name="twitter:card" content="summary" />
        <meta name="twitter:title" content={pageTitle} />
        <meta name="twitter:description" content={pageDescription} />
      </Head>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Breadcrumbs */}
        <Breadcrumbs items={breadcrumbs} className="mb-6" />

        {/* Formulario de edición */}
        <{{ENTITY_NAME}}Form
          id={id}
          mode="edit"
          initialData={initialData}
          onSuccess={handleSuccess}
          onCancel={handleCancel}
        />
      </div>
    </Layout>
  );
};

export default Edit{{ENTITY_NAME}}Page;

// Obtener datos del servidor y verificar permisos
export const getServerSideProps: GetServerSideProps<Edit{{ENTITY_NAME}}PageProps> = async (context) => {
  const { id } = context.params!;
  
  {{#unless PERMISSIONS.update}}
  // Editar está deshabilitado - redirigir
  return {
    redirect: {
      destination: '/{{ENTITY_NAME_LOWER}}',
      permanent: false,
    },
  };
  {{/unless}}

  if (!id || typeof id !== 'string') {
    return {
      notFound: true,
    };
  }

  const queryClient = new QueryClient();

  try {
    // Aquí puedes agregar verificación de autenticación/autorización
    // const session = await getServerSession(context.req, context.res, authOptions);
    // if (!session) {
    //   return {
    //     redirect: {
    //       destination: '/auth/signin',
    //       permanent: false,
    //     },
    //   };
    // }

    // Obtener datos del {{ENTITY_NAME_LOWER}}
    const apiUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}{{API_ENDPOINT}}/${id}`;
    
    const response = await fetch(apiUrl, {
      headers: {
        'Content-Type': 'application/json',
        // Pasar cookies para autenticación si es necesario
        'Cookie': context.req.headers.cookie || '',
      },
    });

    if (response.status === 404) {
      return {
        notFound: true,
      };
    }

    if (!response.ok) {
      throw new Error(`Error ${response.status}: ${response.statusText}`);
    }

    const {{ENTITY_NAME_LOWER}}Data = await response.json();

    // Pre-poblar el cache de React Query
    await queryClient.prefetchQuery({
      queryKey: ['{{ENTITY_NAME_LOWER}}', id],
      queryFn: () => {{ENTITY_NAME_LOWER}}Data,
    });

    return {
      props: {
        id,
        initialData: {{ENTITY_NAME_LOWER}}Data,
        dehydratedState: dehydrate(queryClient),
      },
    };

  } catch (error) {
    console.error(`Error loading {{ENTITY_NAME_LOWER}} ${id}:`, error);

    return {
      props: {
        id,
        error: error instanceof Error ? error.message : 'Error desconocido al cargar {{ENTITY_NAME_LOWER}}',
      },
    };
  }
};
