/**
 * P치gina de edici칩n de {{ENTITY_NAME}} - App Router
 * Formulario para editar {{ENTITY_NAME_LOWER}} existente
 * Generado autom치ticamente por MCP CRUD Generator
 * Timestamp: {{TIMESTAMP}}
 */

'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { {{ENTITY_NAME}}Form } from '../../../../../components/{{ENTITY_NAME}}Form';
import { use{{ENTITY_NAME}} } from '../../../../../hooks/use{{ENTITY_NAME}}';
import Link from 'next/link';
import { ArrowLeftIcon } from '@heroicons/react/24/outline';

interface Edit{{ENTITY_NAME}}PageProps {
  params: {
    id: string;
  };
}

export default function Edit{{ENTITY_NAME}}Page({ params }: Edit{{ENTITY_NAME}}PageProps) {
  const { id } = params;
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const {
    {{ENTITY_NAME_LOWER}},
    loading,
    error,
    update{{ENTITY_NAME}}
  } = use{{ENTITY_NAME}}({ id });

  const handleSubmit = async (data: any) => {
    try {
      setIsSubmitting(true);
      await update{{ENTITY_NAME}}(id, data);
      
      // Redirect back to detail page
      router.push(`/{{ENTITY_NAME_PLURAL_LOWER}}/${id}`);
      
    } catch (error) {
      console.error('Error updating {{ENTITY_NAME_LOWER}}:', error);
      // Error handling is done in the form component
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCancel = () => {
    router.back();
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
            <div className="space-y-4">
              <div className="h-10 bg-gray-200 rounded"></div>
              <div className="h-10 bg-gray-200 rounded"></div>
              <div className="h-20 bg-gray-200 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error || !{{ENTITY_NAME_LOWER}}) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 text-center">
          <div className="text-red-600 mb-2">
            {error || '{{ENTITY_NAME}} no encontrado'}
          </div>
          <Link
            href="/{{ENTITY_NAME_PLURAL_LOWER}}"
            className="text-blue-600 hover:text-blue-800 font-medium"
          >
            Volver a {{ENTITY_NAME_PLURAL}}
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Header */}
      <div className="mb-6">
        <div className="flex items-center gap-4 mb-4">
          <Link
            href={`/{{ENTITY_NAME_PLURAL_LOWER}}/${id}`}
            className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
          >
            <ArrowLeftIcon className="h-5 w-5" />
            Volver al detalle
          </Link>
        </div>
        
        <div>
          <h1 className="text-3xl font-bold text-gray-900">
            Editar {{ENTITY_NAME}}
          </h1>
          <p className="text-gray-600 mt-1">
            Actualiza la informaci칩n del {{ENTITY_NAME_LOWER}}
          </p>
        </div>
      </div>

      {/* Form */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <{{ENTITY_NAME}}Form
          initialData={{ENTITY_NAME_LOWER}}
          onSubmit={handleSubmit}
          onCancel={handleCancel}
          isSubmitting={isSubmitting}
          submitLabel="Actualizar {{ENTITY_NAME}}"
          isEditing={true}
        />
      </div>

      {/* Help Text */}
      <div className="mt-6 text-center text-gray-600 text-sm">
        <p>Los campos marcados con (*) son obligatorios</p>
      </div>
    </div>
  );
}