/**
 * Esquemas de validación Zod para {{ENTITY_NAME}}
 * Generado automáticamente por MCP CRUD Generator
 * Timestamp: {{TIMESTAMP}}
 */

import { z } from 'zod';

{{#each FIELDS}}
{{#if (eq type 'relation')}}
// Schema para {{relation.relationEntity}}
const {{lower relation.relationEntity}}SelectSchema = z.object({
  {{relation.valueField}}: z.string().min(1, '{{relation.relationEntity}} ID es requerido'),
  {{relation.displayField}}: z.string().min(1, '{{relation.relationEntity}} nombre es requerido'),
});

{{/if}}
{{/each}}

// Schema base para {{ENTITY_NAME}}
export const {{ENTITY_NAME_LOWER}}Schema = z.object({
  {{#each FIELDS}}
  
  // Campo: {{label}}
  {{#if (eq type 'text')}}
  {{name}}: z.string()
    {{#if required}}.min(1, '{{label}} es requerido'){{else}}.optional(){{/if}}
    {{#if validation.min}}.min({{validation.min}}, '{{label}} debe tener al menos {{validation.min}} caracteres'){{/if}}
    {{#if validation.max}}.max({{validation.max}}, '{{label}} debe tener máximo {{validation.max}} caracteres'){{/if}}
    {{#if validation.pattern}}.regex(/{{validation.pattern}}/, '{{label}} tiene un formato inválido'){{/if}},
  
  {{else if (eq type 'email')}}
  {{name}}: z.string()
    {{#if required}}.min(1, '{{label}} es requerido'){{else}}.optional(){{/if}}
    .email('{{label}} debe ser un email válido'),
  
  {{else if (eq type 'password')}}
  {{name}}: z.string()
    {{#if required}}.min(1, '{{label}} es requerido'){{else}}.optional(){{/if}}
    {{#if validation.min}}.min({{validation.min}}, '{{label}} debe tener al menos {{validation.min}} caracteres'){{/if}}
    {{#if validation.max}}.max({{validation.max}}, '{{label}} debe tener máximo {{validation.max}} caracteres'){{/if}}
    {{#if validation.pattern}}.regex(/{{validation.pattern}}/, '{{label}} debe cumplir con el formato requerido'){{/if}},
  
  {{else if (eq type 'number')}}
  {{name}}: z.number({
      required_error: '{{label}} es requerido',
      invalid_type_error: '{{label}} debe ser un número'
    })
    {{#if validation.min}}.min({{validation.min}}, '{{label}} debe ser mayor o igual a {{validation.min}}'){{/if}}
    {{#if validation.max}}.max({{validation.max}}, '{{label}} debe ser menor o igual a {{validation.max}}'){{/if}}
    {{#unless required}}.optional(){{/unless}},
  
  {{else if (eq type 'textarea')}}
  {{name}}: z.string()
    {{#if required}}.min(1, '{{label}} es requerido'){{else}}.optional(){{/if}}
    {{#if validation.min}}.min({{validation.min}}, '{{label}} debe tener al menos {{validation.min}} caracteres'){{/if}}
    {{#if validation.max}}.max({{validation.max}}, '{{label}} debe tener máximo {{validation.max}} caracteres'){{/if}},
  
  {{else if (eq type 'select')}}
  {{name}}: z.enum([
      {{#each validation.options}}
      '{{this}}'{{#unless @last}},{{/unless}}
      {{/each}}
    ], {
      required_error: '{{label}} es requerido',
      invalid_type_error: '{{label}} debe ser una opción válida'
    }){{#unless required}}.optional(){{/unless}},
  
  {{else if (eq type 'boolean')}}
  {{name}}: z.boolean({
      required_error: '{{label}} es requerido',
      invalid_type_error: '{{label}} debe ser verdadero o falso'
    }){{#unless required}}.optional(){{/unless}},
  
  {{else if (eq type 'date')}}
  {{name}}: z.date({
      required_error: '{{label}} es requerido',
      invalid_type_error: '{{label}} debe ser una fecha válida'
    }){{#unless required}}.optional(){{/unless}},
  
  {{else if (eq type 'file')}}
  {{name}}: z.string()
    {{#if required}}.min(1, '{{label}} es requerido'){{else}}.optional(){{/if}}
    .url('{{label}} debe ser una URL válida'),
  
  {{else if (eq type 'relation')}}
  {{#if relation.multiple}}
  {{name}}: z.array({{lower relation.relationEntity}}SelectSchema)
    {{#if required}}.min(1, 'Debe seleccionar al menos un {{label}}'){{else}}.optional(){{/if}},
  {{else}}
  {{name}}: {{lower relation.relationEntity}}SelectSchema
    {{#unless required}}.optional().nullable(){{/unless}},
  {{/if}}
  {{/if}}
  
  {{/each}}
});

// Schema para crear {{ENTITY_NAME}} (sin ID ni timestamps)
export const create{{ENTITY_NAME}}Schema = {{ENTITY_NAME_LOWER}}Schema;

// Schema para actualizar {{ENTITY_NAME}} (todos los campos opcionales)
export const update{{ENTITY_NAME}}Schema = {{ENTITY_NAME_LOWER}}Schema.partial();

// Schema para parámetros de consulta de lista
export const {{ENTITY_NAME_LOWER}}ListQuerySchema = z.object({
  page: z.coerce.number().min(1).default(1),
  limit: z.coerce.number().min(1).max(100).default(10),
  search: z.string().optional(),
  sort: z.enum([
    {{#each FIELDS}}
    {{#if sortable}}
    '{{name}}',
    {{/if}}
    {{/each}}
    'createdAt',
    'updatedAt'
  ]).optional(),
  order: z.enum(['asc', 'desc']).default('asc'),
});

// Schema para filtros específicos
export const {{ENTITY_NAME_LOWER}}FiltersSchema = z.object({
  {{#each FIELDS}}
  {{#if filterable}}
  {{#if (eq type 'number')}}
  {{name}}_min: z.coerce.number().optional(),
  {{name}}_max: z.coerce.number().optional(),
  {{else if (eq type 'date')}}
  {{name}}_start: z.coerce.date().optional(),
  {{name}}_end: z.coerce.date().optional(),
  {{else if (eq type 'boolean')}}
  {{name}}: z.coerce.boolean().optional(),
  {{else if (eq type 'relation')}}
  {{name}}: z.string().transform(val => val.split(',')).optional(),
  {{else if (eq type 'select')}}
  {{name}}: z.string().transform(val => val.split(',')).optional(),
  {{else}}
  {{name}}: z.string().optional(),
  {{/if}}
  {{/if}}
  {{/each}}
});

// Schema combinado para consultas de lista
export const {{ENTITY_NAME_LOWER}}SearchSchema = {{ENTITY_NAME_LOWER}}ListQuerySchema.merge({{ENTITY_NAME_LOWER}}FiltersSchema);

// Schemas para formularios (con transformaciones para inputs)
export const {{ENTITY_NAME_LOWER}}FormSchema = z.object({
  {{#each FIELDS}}
  
  {{#if (eq type 'number')}}
  {{name}}: z.union([
    z.number(),
    z.string().transform((val) => {
      const num = parseFloat(val);
      if (isNaN(num)) {
        throw new Error('{{label}} debe ser un número válido');
      }
      return num;
    })
  ]){{#unless required}}.optional(){{/unless}},
  
  {{else if (eq type 'date')}}
  {{name}}: z.union([
    z.date(),
    z.string().transform((val) => {
      const date = new Date(val);
      if (isNaN(date.getTime())) {
        throw new Error('{{label}} debe ser una fecha válida');
      }
      return date;
    })
  ]){{#unless required}}.optional(){{/unless}},
  
  {{else if (eq type 'file')}}
  {{name}}: z.union([
    z.string().url('{{label}} debe ser una URL válida'),
    z.instanceof(File, { message: '{{label}} debe ser un archivo' })
  ]){{#unless required}}.optional(){{/unless}},
  
  {{else}}
  // Usar el schema base para otros tipos
  {{name}}: {{ENTITY_NAME_LOWER}}Schema.shape.{{name}},
  {{/if}}
  
  {{/each}}
});

// Schemas para validación de campos individuales
export const {{ENTITY_NAME_LOWER}}FieldSchemas = {
  {{#each FIELDS}}
  {{name}}: {{ENTITY_NAME_LOWER}}Schema.shape.{{name}},
  {{/each}}
};

// Schema para operaciones en lote
export const {{ENTITY_NAME_LOWER}}BulkOperationSchema = z.object({
  ids: z.array(z.string().min(1, 'ID inválido')).min(1, 'Debe seleccionar al menos un elemento'),
  operation: z.enum(['delete', 'update']),
  data: z.any().optional() // Para operaciones de actualización en lote
});

{{#each FIELDS}}
{{#if (eq type 'relation')}}
// Schema para búsqueda de {{relation.relationEntity}}
export const {{lower relation.relationEntity}}SearchSchema = z.object({
  q: z.string().min({{relation.minChars}}, 'Mínimo {{relation.minChars}} caracteres para buscar'),
  fields: z.string().default('{{#each relation.searchFields}}{{this}}{{#unless @last}},{{/unless}}{{/each}}'),
  limit: z.coerce.number().min(1).max(50).default(10),
});

{{/if}}
{{/each}}

// Funciones de validación auxiliares
export const {{ENTITY_NAME_LOWER}}Validators = {
  /**
   * Valida un {{ENTITY_NAME_LOWER}} completo
   */
  validate{{ENTITY_NAME}}: (data: unknown) => {
    return {{ENTITY_NAME_LOWER}}Schema.safeParse(data);
  },

  /**
   * Valida datos para crear {{ENTITY_NAME_LOWER}}
   */
  validateCreate: (data: unknown) => {
    return create{{ENTITY_NAME}}Schema.safeParse(data);
  },

  /**
   * Valida datos para actualizar {{ENTITY_NAME_LOWER}}
   */
  validateUpdate: (data: unknown) => {
    return update{{ENTITY_NAME}}Schema.safeParse(data);
  },

  /**
   * Valida parámetros de búsqueda
   */
  validateSearch: (data: unknown) => {
    return {{ENTITY_NAME_LOWER}}SearchSchema.safeParse(data);
  },

  /**
   * Valida datos de formulario
   */
  validateForm: (data: unknown) => {
    return {{ENTITY_NAME_LOWER}}FormSchema.safeParse(data);
  },

  {{#each FIELDS}}
  /**
   * Valida el campo {{name}}
   */
  validate{{capitalize name}}: (value: unknown) => {
    return {{ENTITY_NAME_LOWER}}FieldSchemas.{{name}}.safeParse(value);
  },

  {{/each}}
};

// Tipos derivados de los schemas
export type {{ENTITY_NAME}}ValidationInput = z.input<typeof {{ENTITY_NAME_LOWER}}Schema>;
export type {{ENTITY_NAME}}ValidationOutput = z.output<typeof {{ENTITY_NAME_LOWER}}Schema>;
export type Create{{ENTITY_NAME}}ValidationInput = z.input<typeof create{{ENTITY_NAME}}Schema>;
export type Update{{ENTITY_NAME}}ValidationInput = z.input<typeof update{{ENTITY_NAME}}Schema>;
export type {{ENTITY_NAME}}FormValidationInput = z.input<typeof {{ENTITY_NAME_LOWER}}FormSchema>;
export type {{ENTITY_NAME}}SearchValidationInput = z.input<typeof {{ENTITY_NAME_LOWER}}SearchSchema>;

// Constantes de validación
export const {{ENTITY_NAME_UPPER}}_VALIDATION_MESSAGES = {
  REQUIRED: (field: string) => `${field} es requerido`,
  INVALID_TYPE: (field: string, type: string) => `${field} debe ser de tipo ${type}`,
  MIN_LENGTH: (field: string, min: number) => `${field} debe tener al menos ${min} caracteres`,
  MAX_LENGTH: (field: string, max: number) => `${field} debe tener máximo ${max} caracteres`,
  MIN_VALUE: (field: string, min: number) => `${field} debe ser mayor o igual a ${min}`,
  MAX_VALUE: (field: string, max: number) => `${field} debe ser menor o igual a ${max}`,
  INVALID_EMAIL: (field: string) => `${field} debe ser un email válido`,
  INVALID_URL: (field: string) => `${field} debe ser una URL válida`,
  INVALID_DATE: (field: string) => `${field} debe ser una fecha válida`,
  INVALID_FORMAT: (field: string) => `${field} tiene un formato inválido`,
} as const;

// Helper para formatear errores de validación
export function formatValidationErrors(errors: z.ZodError): Record<string, string> {
  const formatted: Record<string, string> = {};
  
  errors.errors.forEach((error) => {
    const path = error.path.join('.');
    formatted[path] = error.message;
  });
  
  return formatted;
}

// Helper para validar y formatear errores en una sola función
export function validateAndFormat<T>(
  schema: z.ZodSchema<T>,
  data: unknown
): { success: true; data: T } | { success: false; errors: Record<string, string> } {
  const result = schema.safeParse(data);
  
  if (result.success) {
    return { success: true, data: result.data };
  }
  
  return {
    success: false,
    errors: formatValidationErrors(result.error)
  };
}

// Exportar schemas por defecto
export {
  {{ENTITY_NAME_LOWER}}Schema as default,
  create{{ENTITY_NAME}}Schema,
  update{{ENTITY_NAME}}Schema,
  {{ENTITY_NAME_LOWER}}FormSchema,
  {{ENTITY_NAME_LOWER}}SearchSchema,
  {{ENTITY_NAME_LOWER}}FiltersSchema
};
